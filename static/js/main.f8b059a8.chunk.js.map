{"version":3,"sources":["mytodo.js","todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleInput","event","console","log","setState","target","value","handleSubmit","preventDefault","props","submit","date","Date","id","now","complete","onSubmit","this","placeholder","onChange","onClick","Component","style","textDecoration","todo","slice","removeClicked","Header","title","App","display","addTodo","todos","map","filter","toShow","d","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RACqBA,E,2MACnBC,MAAQ,CACNC,KAAM,I,EAIRC,YAAc,SAAAC,GACZC,QAAQC,IAAI,UACZ,EAAKC,SAAS,CACZL,KAAME,EAAMI,OAAOC,S,EAKvBC,aAAe,SAAAN,GACbA,EAAMO,iBAEN,EAAKC,MAAMC,OAAO,CAChBC,KAAMC,OACNC,GAAID,KAAKE,MACTf,KAAM,EAAKD,MAAMC,KACjBgB,UAAU,IAEZ,EAAKX,SAAS,CACZL,KAAM,GACNY,KAAM,M,wEAKR,OACE,0BAAMK,SAAUC,KAAKV,cACnB,2BACEW,YAAY,kBACZZ,MAAOW,KAAKnB,MAAMC,KAClBoB,SAAUF,KAAKjB,cAEjB,4BAAQoB,QAASH,KAAKV,cAAtB,Y,GArC8Bc,aCAvB,G,MAAA,SAAAZ,GAAK,OAClB,6BACE,yBACEa,MAAO,CACLC,eAAgBd,EAAMe,KAAKT,SAAW,eAAiB,IAEzDK,QAASX,EAAMM,UAEdN,EAAMe,KAAKzB,KANd,KAMsBU,EAAMe,KAAKb,KAAKc,MAAM,EAAG,KAE/C,4BAAQL,QAASX,EAAMiB,eAAvB,QCNEC,E,iLAEF,OAAO,4BAAKV,KAAKR,MAAMmB,W,GAFNP,aAwENQ,E,2MAjEb/B,MAAQ,CACN0B,KAAM,GACNM,QAAS,O,EAEXC,QAAU,SAAAC,GACR,EAAK5B,SAAS,CACZoB,KAAK,CAAEQ,GAAH,mBAAa,EAAKlC,MAAM0B,U,EAIhCT,SAAW,SAAAF,GACT,EAAKT,SAAS,CACZoB,KAAM,EAAK1B,MAAM0B,KAAKS,KAAI,SAAAT,GACxB,OAAIA,EAAKX,KAAOA,EACP,eACFW,EADL,CAEET,UAAWS,EAAKT,WAGXS,Q,EAKfE,cAAgB,SAAAb,GACd,EAAKT,SAAS,CACZoB,KAAM,EAAK1B,MAAM0B,KAAKU,QAAO,SAAAV,GAAI,OAAIA,EAAKX,KAAOA,Q,EAGrDsB,OAAS,SAAAC,GACP,EAAKhC,SAAS,CACZ0B,QAASM,K,wEAGH,IAAD,OACHJ,EAAQ,GAQZ,MAP2B,QAAvBf,KAAKnB,MAAMgC,QACbE,EAAQf,KAAKnB,MAAM0B,KACa,WAAvBP,KAAKnB,MAAMgC,QACpBE,EAAQf,KAAKnB,MAAM0B,KAAKU,QAAO,SAAAV,GAAI,OAAKA,EAAKT,YACb,aAAvBE,KAAKnB,MAAMgC,UACpBE,EAAQf,KAAKnB,MAAM0B,KAAKU,QAAO,SAAAV,GAAI,OAAIA,EAAKT,aAG5C,6BACE,kBAAC,EAAD,CAAQa,MAAM,cACd,kBAAC,EAAD,CAAUlB,OAAQO,KAAKc,UACtBC,EAAMC,KAAI,SAAAT,GAAI,OACb,kBAAC,EAAD,CACEa,IAAKb,EAAKX,GACVE,SAAU,kBAAM,EAAKA,SAASS,EAAKX,KACnCW,KAAMA,EACNE,cAAe,kBAAM,EAAKA,cAAcF,EAAKX,UAGjD,6BACE,4BAAQO,QAAS,kBAAM,EAAKe,OAAO,SAAnC,OACA,4BAAQf,QAAS,kBAAM,EAAKe,OAAO,YAAnC,UACA,4BAAQf,QAAS,kBAAM,EAAKe,OAAO,cAAnC,kB,GA3DQd,aCCEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f8b059a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nexport default class TodoForm extends Component {\n  state = {\n    text: \"\"\n  };\n\n  // this function will update the state of 'text' when user types\n  handleInput = event => {\n    console.log(\"called\");\n    this.setState({\n      text: event.target.value\n    });\n  };\n\n  //handleSubmit function will pass parameters to  addTodo function\n  handleSubmit = event => {\n    event.preventDefault();\n    //preventDefault prevents the auto loading of the page\n    this.props.submit({\n      date: Date(), //provides date\n      id: Date.now(), //provides a unique id\n      text: this.state.text,\n      complete: false\n    });\n    this.setState({\n      text: \"\",\n      date: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          placeholder=\"enter your work\"\n          value={this.state.text}\n          onChange={this.handleInput}\n        ></input>\n        <button onClick={this.handleSubmit}>add</button>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nexport default props => (\n  <div>\n    <div\n      style={{\n        textDecoration: props.todo.complete ? \"line-through\" : \"\"\n      }}\n      onClick={props.complete}\n    >\n      {props.todo.text}--{props.todo.date.slice(0, 15)}\n    </div>\n    <button onClick={props.removeClicked}>X</button>\n  </div>\n);\n","import React, { Component } from \"react\";\nimport TodoForm from \"./mytodo.js\";\nimport \"./App.css\";\nimport Todo from \"./todo\";\n\nclass Header extends Component {\n  render() {\n    return <h1>{this.props.title}</h1>;\n  }\n}\n\nclass App extends Component {\n  state = {\n    todo: [],\n    display: \"all\"\n  };\n  addTodo = todos => {\n    this.setState({\n      todo: [todos, ...this.state.todo]\n    });\n  };\n\n  complete = id => {\n    this.setState({\n      todo: this.state.todo.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            complete: !todo.complete\n          };\n        } else {\n          return todo;\n        }\n      })\n    });\n  };\n  removeClicked = id => {\n    this.setState({\n      todo: this.state.todo.filter(todo => todo.id !== id)\n    });\n  };\n  toShow = d => {\n    this.setState({\n      display: d\n    });\n  };\n  render() {\n    let todos = [];\n    if (this.state.display === \"all\") {\n      todos = this.state.todo;\n    } else if (this.state.display === \"active\") {\n      todos = this.state.todo.filter(todo => !todo.complete);\n    } else if (this.state.display === \"complete\") {\n      todos = this.state.todo.filter(todo => todo.complete);\n    }\n    return (\n      <div>\n        <Header title=\"To-do-app\"></Header>\n        <TodoForm submit={this.addTodo}></TodoForm>\n        {todos.map(todo => (\n          <Todo\n            key={todo.id}\n            complete={() => this.complete(todo.id)}\n            todo={todo}\n            removeClicked={() => this.removeClicked(todo.id)}\n          />\n        ))}\n        <div>\n          <button onClick={() => this.toShow(\"all\")}>all</button>\n          <button onClick={() => this.toShow(\"active\")}>active</button>\n          <button onClick={() => this.toShow(\"complete\")}>complete</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}